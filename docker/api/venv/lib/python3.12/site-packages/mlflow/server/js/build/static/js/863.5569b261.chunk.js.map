{"version":3,"file":"static/js/863.5569b261.chunk.js","mappings":"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","sources":["common/components/IconButton.tsx","experiment-tracking/components/LazyPlot.tsx","experiment-tracking/components/LineSmoothSlider.tsx","common/components/Progress.tsx","experiment-tracking/components/MetricsPlotControls.tsx","experiment-tracking/components/HtmlTableView.tsx","experiment-tracking/components/MetricsSummaryTable.tsx","experiment-tracking/components/RunLinksPopover.tsx","experiment-tracking/components/MetricsPlotPanel.tsx","experiment-tracking/components/MetricsPlotView.tsx","experiment-tracking/components/NotFoundPage.tsx"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Button } from '@databricks/design-system';\n\ntype Props = {\n  icon: React.ReactNode;\n  style?: any;\n  className?: string;\n  restProps?: any;\n};\n\nexport const IconButton = ({ icon, className, style, ...restProps }: Props) => {\n  return (\n    <Button\n      componentId=\"codegen_mlflow_app_src_common_components_iconbutton.tsx_20\"\n      type=\"link\"\n      className={className}\n      style={{ padding: 0, ...style }}\n      {...restProps}\n    >\n      {icon}\n    </Button>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacySkeleton } from '@databricks/design-system';\nimport { SectionErrorBoundary } from '../../common/components/error-boundaries/SectionErrorBoundary';\n\nconst Plot = React.lazy(() => import('react-plotly.js'));\n\nexport const LazyPlot = (props: any) => (\n  <SectionErrorBoundary>\n    <React.Suspense fallback={<LegacySkeleton active />}>\n      <Plot {...props} />\n    </React.Suspense>\n  </SectionErrorBoundary>\n);\n","import { Col, Row, useDesignSystemTheme } from '@databricks/design-system';\nimport { InputNumber, Slider } from 'antd';\n\ninterface LineSmoothSliderProps {\n  max?: number;\n  min?: number;\n  step?: number | null;\n  marks?: Record<number, string>;\n  defaultValue: number | undefined;\n  onChange: (value: number) => void;\n  disabled?: boolean;\n  onAfterChange?: (value: number) => void;\n}\n\nexport const LineSmoothSlider = ({\n  max,\n  min,\n  step,\n  marks,\n  defaultValue,\n  onChange,\n  disabled,\n  onAfterChange,\n}: LineSmoothSliderProps) => {\n  const { theme } = useDesignSystemTheme();\n  const STEP_MARKS_DISPLAY_THRESHOLD = 10;\n  const INPUT_NUMBER_WIDTH = 60;\n  // Until DuBois <Slider /> is under development, let's override default antd palette\n  const sliderColor = disabled ? theme.colors.actionDisabledText : theme.colors.primary;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexWrap: 'nowrap',\n        height: '32px',\n        gap: theme.spacing.md,\n        paddingLeft: theme.spacing.xs, // Prevent slider from being cut off\n      }}\n    >\n      <Slider\n        css={{\n          '& .ant-slider-dot': {\n            display: marks && Object.keys(marks).length > STEP_MARKS_DISPLAY_THRESHOLD ? 'none' : 'inherit',\n          },\n          width: `calc(100% - ${INPUT_NUMBER_WIDTH + theme.spacing.md}px)`,\n        }}\n        disabled={disabled}\n        min={min}\n        max={max}\n        onChange={onChange}\n        value={typeof defaultValue === 'number' ? defaultValue : 1}\n        trackStyle={{ background: sliderColor }}\n        handleStyle={{ background: sliderColor, borderColor: sliderColor }}\n        marks={marks}\n        step={step}\n        onAfterChange={onAfterChange}\n        data-test-id=\"Slider\"\n      />\n      <InputNumber\n        disabled={disabled}\n        min={min}\n        max={max}\n        css={{ width: INPUT_NUMBER_WIDTH }}\n        step={step === null ? undefined : step}\n        value={typeof defaultValue === 'number' ? defaultValue : 1}\n        onChange={onAfterChange ? onAfterChange : onChange}\n        data-test-id=\"InputNumber\"\n      />\n    </div>\n  );\n};\n","import { Theme } from '@emotion/react';\n\nexport interface ProgressProps {\n  percent: number;\n  format: (percent: number) => string;\n  className?: string;\n}\n\n/**\n * Recreates basic features of antd's <Progress /> component.\n * Temporary solution, waiting for this component to be included in DuBois.\n */\nexport const Progress = (props: ProgressProps) => {\n  return (\n    <div css={styles.wrapper} className={props.className}>\n      <div css={styles.track}>\n        <div css={styles.progressTrack} style={{ width: `${props.percent}%` }} />\n      </div>\n      {props.format(props.percent)}\n    </div>\n  );\n};\n\nconst styles = {\n  wrapper: (theme: Theme) => ({ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }),\n  track: (theme: Theme) => ({\n    backgroundColor: theme.colors.backgroundSecondary,\n    height: theme.spacing.sm,\n    flex: 1,\n    borderRadius: theme.spacing.sm,\n  }),\n  progressTrack: (theme: Theme) => ({\n    backgroundColor: theme.colors.primary,\n    height: theme.spacing.sm,\n    borderRadius: theme.spacing.sm,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport _ from 'lodash';\nimport { Button, LegacySelect, Switch, LegacyTooltip, Radio, QuestionMarkIcon } from '@databricks/design-system';\nimport { Progress } from '../../common/components/Progress';\nimport { CHART_TYPE_LINE, METRICS_PLOT_POLLING_INTERVAL_MS } from './MetricsPlotPanel';\n\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { LineSmoothSlider } from './LineSmoothSlider';\n\nconst RadioGroup = Radio.Group;\nexport const X_AXIS_WALL = 'wall';\nexport const X_AXIS_STEP = 'step';\nexport const X_AXIS_RELATIVE = 'relative';\nexport const MAX_LINE_SMOOTHNESS = 100;\n\ntype OwnProps = {\n  distinctMetricKeys: string[];\n  selectedMetricKeys: string[];\n  selectedXAxis: string;\n  handleXAxisChange: (...args: any[]) => any;\n  handleShowPointChange: (...args: any[]) => any;\n  handleMetricsSelectChange: (...args: any[]) => any;\n  handleYAxisLogScaleChange: (...args: any[]) => any;\n  handleLineSmoothChange: (...args: any[]) => any;\n  chartType: string;\n  initialLineSmoothness: number;\n  yAxisLogScale: boolean;\n  showPoint: boolean;\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n  numRuns: number;\n  numCompletedRuns: number;\n  handleDownloadCsv: (...args: any[]) => any;\n  disableSmoothnessControl: boolean;\n};\n\ntype Props = OwnProps & typeof MetricsPlotControlsImpl.defaultProps;\n\nexport class MetricsPlotControlsImpl extends React.Component<Props> {\n  static defaultProps = {\n    disableSmoothnessControl: false,\n  };\n\n  handleMetricsSelectFilterChange = (text: any, option: any) =>\n    option.props.title.toUpperCase().includes(text.toUpperCase());\n\n  getAllMetricKeys = () => {\n    const { distinctMetricKeys } = this.props;\n    return distinctMetricKeys.map((metricKey) => ({\n      title: metricKey,\n      value: metricKey,\n      key: metricKey,\n    }));\n  };\n\n  render() {\n    const {\n      chartType,\n      yAxisLogScale,\n      initialLineSmoothness,\n      showPoint,\n      numRuns,\n      numCompletedRuns,\n      disableSmoothnessControl,\n    } = this.props;\n\n    const lineSmoothnessTooltipText = (\n      <FormattedMessage\n        // eslint-disable-next-line max-len\n        defaultMessage='Make the line between points \"smoother\" based on Exponential Moving Average. Smoothing can be useful for displaying the overall trend when the logging frequency is high.'\n        description=\"Helpful tooltip message to help with line smoothness for the metrics plot\"\n      />\n    );\n    const completedRunsTooltipText = (\n      <FormattedMessage\n        // eslint-disable-next-line max-len\n        defaultMessage=\"MLflow UI automatically fetches metric histories for active runs and updates the metrics plot with a {interval} second interval.\"\n        description=\"Helpful tooltip message to explain the automatic metrics plot update\"\n        values={{ interval: Math.round(METRICS_PLOT_POLLING_INTERVAL_MS / 1000) }}\n      />\n    );\n    return (\n      <div\n        className=\"plot-controls\"\n        css={[styles.controlsWrapper, chartType === CHART_TYPE_LINE && styles.centeredControlsWrapper]}\n      >\n        {chartType === CHART_TYPE_LINE ? (\n          <div>\n            <div className=\"inline-control\">\n              <div className=\"control-label\">\n                <FormattedMessage\n                  defaultMessage=\"Completed Runs\"\n                  description=\"Label for the progress bar to show the number of completed runs\"\n                />{' '}\n                <LegacyTooltip title={completedRunsTooltipText}>\n                  <QuestionMarkIcon />\n                </LegacyTooltip>\n                <Progress\n                  percent={Math.round((100 * numCompletedRuns) / numRuns)}\n                  format={() => `${numCompletedRuns}/${numRuns}`}\n                />\n              </div>\n            </div>\n            <div className=\"inline-control\">\n              <div className=\"control-label\">\n                <FormattedMessage\n                  defaultMessage=\"Points:\"\n                  // eslint-disable-next-line max-len\n                  description=\"Label for the toggle button to toggle to show points or not for the metric experiment run\"\n                />\n              </div>\n              <Switch\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricsplotcontrols.tsx_120\"\n                data-testid=\"show-point-toggle\"\n                defaultChecked={showPoint}\n                onChange={this.props.handleShowPointChange}\n              />\n            </div>\n            {!disableSmoothnessControl && (\n              <div className=\"block-control\">\n                <div className=\"control-label\">\n                  <FormattedMessage\n                    defaultMessage=\"Line Smoothness\"\n                    description=\"Label for the smoothness slider for the graph plot for metrics\"\n                  />{' '}\n                  <LegacyTooltip title={lineSmoothnessTooltipText}>\n                    <QuestionMarkIcon />\n                  </LegacyTooltip>\n                </div>\n                <LineSmoothSlider\n                  data-testid=\"smoothness-toggle\"\n                  min={1}\n                  max={MAX_LINE_SMOOTHNESS}\n                  onChange={_.debounce(this.props.handleLineSmoothChange, 100)}\n                  defaultValue={initialLineSmoothness}\n                />\n              </div>\n            )}\n            <div className=\"block-control\">\n              <div className=\"control-label\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  // eslint-disable-next-line max-len\n                  description=\"Label for the radio button to toggle the control on the X-axis of the metric graph for the experiment\"\n                />\n              </div>\n              <RadioGroup\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricsplotcontrols.tsx_154\"\n                name=\"metrics-plot-x-axis-radio-group\"\n                css={styles.xAxisControls}\n                onChange={this.props.handleXAxisChange}\n                value={this.props.selectedXAxis}\n              >\n                <Radio value={X_AXIS_STEP} data-testid=\"x-axis-radio\">\n                  <FormattedMessage\n                    defaultMessage=\"Step\"\n                    // eslint-disable-next-line max-len\n                    description=\"Radio button option to choose the step control option for the X-axis for metric graph on the experiment runs\"\n                  />\n                </Radio>\n                <Radio value={X_AXIS_WALL} data-testid=\"x-axis-radio\">\n                  <FormattedMessage\n                    defaultMessage=\"Time (Wall)\"\n                    // eslint-disable-next-line max-len\n                    description=\"Radio button option to choose the time wall control option for the X-axis for metric graph on the experiment runs\"\n                  />\n                </Radio>\n                <Radio value={X_AXIS_RELATIVE} data-testid=\"x-axis-radio\">\n                  <FormattedMessage\n                    defaultMessage=\"Time (Relative)\"\n                    // eslint-disable-next-line max-len\n                    description=\"Radio button option to choose the time relative control option for the X-axis for metric graph on the experiment runs\"\n                  />\n                </Radio>\n              </RadioGroup>\n            </div>\n          </div>\n        ) : null}\n        <div className=\"block-control\">\n          <div className=\"control-label\">\n            <FormattedMessage\n              defaultMessage=\"Y-axis:\"\n              // eslint-disable-next-line max-len\n              description=\"Label where the users can choose the metric of the experiment run to be plotted on the Y-axis\"\n            />\n          </div>\n          <LegacySelect\n            placeholder={this.props.intl.formatMessage({\n              defaultMessage: 'Please select metric',\n              description:\n                // eslint-disable-next-line max-len\n                'Placeholder text where one can select metrics from the list of available metrics to render on the graph',\n            })}\n            value={this.props.selectedMetricKeys}\n            onChange={this.props.handleMetricsSelectChange}\n            mode=\"multiple\"\n            css={styles.axisSelector}\n          >\n            {this.getAllMetricKeys().map((key) => (\n              <LegacySelect.Option value={key.value} key={key.key}>\n                {key.title}\n              </LegacySelect.Option>\n            ))}\n          </LegacySelect>\n        </div>\n        <div className=\"inline-control\">\n          <div className=\"control-label\">\n            <FormattedMessage\n              defaultMessage=\"Y-axis Log Scale:\"\n              // eslint-disable-next-line max-len\n              description=\"Label for the radio button to toggle the Log scale on the Y-axis of the metric graph for the experiment\"\n            />\n          </div>\n          <Switch\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricsplotcontrols.tsx_220\"\n            defaultChecked={yAxisLogScale}\n            onChange={this.props.handleYAxisLogScaleChange}\n          />\n        </div>\n        <div className=\"inline-control\">\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_metricsplotcontrols.tsx_222\"\n            css={{\n              textAlign: 'justify',\n              textAlignLast: 'left',\n            }}\n            onClick={this.props.handleDownloadCsv}\n          >\n            <FormattedMessage\n              defaultMessage=\"Download data\"\n              // eslint-disable-next-line max-len\n              description=\"String for the download csv button to download metrics from this run offline in a CSV format\"\n            />\n            <i className=\"fas fa-download\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  xAxisControls: (theme: any) => ({\n    label: { marginTop: theme.spacing.xs, marginBottom: theme.spacing.xs },\n  }),\n  controlsWrapper: { minWidth: '20%', maxWidth: '30%' },\n  axisSelector: { width: '100%' },\n  centeredControlsWrapper: {\n    // Make controls aligned to plotly line chart\n    justifyContent: 'center',\n  },\n};\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const MetricsPlotControls = injectIntl(MetricsPlotControlsImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { LegacyTable } from '@databricks/design-system';\nimport './HtmlTableView.css';\n\ntype Props = {\n  columns: any[];\n  values: any[];\n  styles?: any;\n  testId?: string;\n  scroll?: any;\n};\n\nexport class HtmlTableView extends Component<Props> {\n  render() {\n    const styles = this.props.styles || {};\n\n    return (\n      <LegacyTable\n        className=\"html-table-view\"\n        data-test-id={this.props.testId}\n        dataSource={this.props.values}\n        columns={this.props.columns}\n        scroll={this.props.scroll}\n        size=\"middle\"\n        pagination={false}\n        style={styles}\n      />\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { HtmlTableView } from './HtmlTableView';\nimport { getRunInfo } from '../reducers/Reducers';\nimport { getLatestMetrics, getMinMetrics, getMaxMetrics } from '../reducers/MetricReducer';\nimport Utils from '../../common/utils/Utils';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport Routes from '../routes';\nimport type { RunInfoEntity } from '../types';\n\nconst maxTableHeight = 300;\n// Because we make the table body scrollable, column widths must be fixed\n// so that the header widths match the table body column widths.\nconst headerColWidth = 350;\nconst dataColWidth = 200;\n\ntype MetricsSummaryTableProps = {\n  runUuids: string[];\n  runExperimentIds: any;\n  runDisplayNames: string[];\n  metricKeys: string[];\n  latestMetrics: any;\n  minMetrics: any;\n  maxMetrics: any;\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n};\n\nclass MetricsSummaryTable extends React.Component<MetricsSummaryTableProps> {\n  render() {\n    const { runUuids } = this.props;\n    return (\n      <div className=\"metrics-summary\">\n        {runUuids.length > 1 ? this.renderMetricTables() : this.renderRunTable(runUuids[0])}\n      </div>\n    );\n  }\n\n  renderRunTable(runUuid: any) {\n    const { metricKeys, latestMetrics, minMetrics, maxMetrics, intl } = this.props;\n    const columns = [\n      {\n        title: intl.formatMessage({\n          defaultMessage: 'Metric',\n          description:\n            // eslint-disable-next-line max-len\n            'Column title for the column displaying the metric names for a run',\n        }),\n        dataIndex: 'metricKey',\n        sorter: (a: any, b: any) => (a.metricKey < b.metricKey ? -1 : a.metricKey > b.metricKey ? 1 : 0),\n        width: headerColWidth,\n      },\n      ...this.dataColumns(),\n    ];\n    return metricKeys.length === 0 ? null : (\n      <HtmlTableView\n        columns={columns}\n        values={getRunValuesByMetric(runUuid, metricKeys, latestMetrics, minMetrics, maxMetrics, intl)}\n        scroll={{ y: maxTableHeight }}\n      />\n    );\n  }\n\n  renderMetricTables() {\n    const { runExperimentIds, runUuids, runDisplayNames, metricKeys, latestMetrics, minMetrics, maxMetrics, intl } =\n      this.props;\n    const columns = [\n      {\n        title: intl.formatMessage({\n          defaultMessage: 'Run',\n          description:\n            // eslint-disable-next-line max-len\n            'Column title for the column displaying the run names for a metric',\n        }),\n        dataIndex: 'runLink',\n        sorter: (a: any, b: any) => (a.runName < b.runName ? -1 : a.runName > b.runName ? 1 : 0),\n        width: headerColWidth,\n      },\n      ...this.dataColumns(),\n    ];\n    return metricKeys.map((metricKey) => {\n      return (\n        <Fragment key={metricKey}>\n          <h1>{metricKey}</h1>\n          <HtmlTableView\n            columns={columns}\n            values={getMetricValuesByRun(\n              metricKey,\n              runExperimentIds,\n              runUuids,\n              runDisplayNames,\n              latestMetrics,\n              minMetrics,\n              maxMetrics,\n              intl,\n            )}\n            scroll={{ y: maxTableHeight }}\n          />\n        </Fragment>\n      );\n    });\n  }\n\n  dataColumns() {\n    return [\n      {\n        title: this.props.intl.formatMessage({\n          defaultMessage: 'Latest',\n          description: 'Column title for the column displaying the latest metric values for a metric',\n        }),\n        dataIndex: 'latestFormatted',\n        sorter: (a: any, b: any) => a.latestValue - b.latestValue,\n        width: dataColWidth,\n        ellipsis: true,\n      },\n      {\n        title: this.props.intl.formatMessage({\n          defaultMessage: 'Min',\n          description: 'Column title for the column displaying the minimum metric values for a metric',\n        }),\n        dataIndex: 'minFormatted',\n        sorter: (a: any, b: any) => a.minValue - b.minValue,\n        width: dataColWidth,\n        ellipsis: true,\n      },\n      {\n        title: this.props.intl.formatMessage({\n          defaultMessage: 'Max',\n          description: 'Column title for the column displaying the maximum metric values for a metric',\n        }),\n        dataIndex: 'maxFormatted',\n        sorter: (a: any, b: any) => a.maxValue - b.maxValue,\n        width: dataColWidth,\n        ellipsis: true,\n      },\n    ];\n  }\n}\n\nconst getMetricValuesByRun = (\n  metricKey: any,\n  runExperimentIds: any,\n  runUuids: any,\n  runDisplayNames: any,\n  latestMetrics: any,\n  minMetrics: any,\n  maxMetrics: any,\n  intl: any,\n) => {\n  return runUuids.map((runUuid: any, runIdx: any) => {\n    const runName = runDisplayNames[runIdx];\n    return {\n      runName: runName,\n      runLink: <Link to={Routes.getRunPageRoute(runExperimentIds[runUuid] || '', runUuid)}>{runName}</Link>,\n      key: runUuid,\n      ...rowData(runUuid, metricKey, latestMetrics, minMetrics, maxMetrics, intl),\n    };\n  });\n};\n\nconst getRunValuesByMetric = (\n  runUuid: any,\n  metricKeys: any,\n  latestMetrics: any,\n  minMetrics: any,\n  maxMetrics: any,\n  intl: any,\n) => {\n  return metricKeys.map((metricKey: any) => {\n    return {\n      metricKey,\n      key: metricKey,\n      ...rowData(runUuid, metricKey, latestMetrics, minMetrics, maxMetrics, intl),\n    };\n  });\n};\n\nconst rowData = (runUuid: any, metricKey: any, latestMetrics: any, minMetrics: any, maxMetrics: any, intl: any) => {\n  const latestMetric = getMetric(latestMetrics, runUuid, metricKey);\n  const minMetric = getMetric(minMetrics, runUuid, metricKey);\n  const maxMetric = getMetric(maxMetrics, runUuid, metricKey);\n  const latestValue = getValue(latestMetric);\n  const minValue = getValue(minMetric);\n  const maxValue = getValue(maxMetric);\n  return {\n    latestFormatted: (\n      <span title={latestValue} css={{ marginRight: 10 }}>\n        {formatMetric(latestMetric, intl)}\n      </span>\n    ),\n    minFormatted: (\n      <span title={minValue} css={{ marginRight: 10 }}>\n        {formatMetric(minMetric, intl)}\n      </span>\n    ),\n    maxFormatted: (\n      <span title={maxValue} css={{ marginRight: 10 }}>\n        {formatMetric(maxMetric, intl)}\n      </span>\n    ),\n    latestValue,\n    minValue,\n    maxValue,\n  };\n};\n\nconst getMetric = (valuesMap: any, runUuid: any, metricKey: any) => valuesMap[runUuid] && valuesMap[runUuid][metricKey];\n\nconst getValue = (metric: any) => metric && metric.value;\n\nconst formatMetric = (metric: any, intl: any) =>\n  metric === undefined\n    ? ''\n    : intl.formatMessage(\n        {\n          defaultMessage: '{value} (step={step})',\n          description: 'Formats a metric value along with the step number it corresponds to',\n        },\n        {\n          value: metric.value,\n          step: metric.step,\n        },\n      );\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids } = ownProps;\n  const runExperimentIds = {};\n  const latestMetrics = {};\n  const minMetrics = {};\n  const maxMetrics = {};\n  runUuids.forEach((runUuid: any) => {\n    const runInfo = getRunInfo(runUuid, state) as RunInfoEntity;\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    runExperimentIds[runUuid] = runInfo && runInfo.experimentId;\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    latestMetrics[runUuid] = getLatestMetrics(runUuid, state);\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    minMetrics[runUuid] = getMinMetrics(runUuid, state);\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    maxMetrics[runUuid] = getMaxMetrics(runUuid, state);\n  });\n  return { runExperimentIds, latestMetrics, minMetrics, maxMetrics };\n};\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const MetricsSummaryTableWithIntl = injectIntl(MetricsSummaryTable);\n\nexport default connect(mapStateToProps)(MetricsSummaryTableWithIntl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport Routes from '../routes';\nimport { IconButton } from '../../common/components/IconButton';\nimport Utils from '../../common/utils/Utils';\nimport { LegacyPopover } from '@databricks/design-system';\n\ntype Props = {\n  experimentId: string;\n  visible: boolean;\n  x: number;\n  y: number;\n  runItems: any[];\n  handleClose: (...args: any[]) => any;\n  handleKeyDown: (...args: any[]) => any;\n  handleVisibleChange: (...args: any[]) => any;\n};\n\nexport class RunLinksPopover extends React.Component<Props> {\n  componentDidMount() {\n    document.addEventListener('keydown', this.props.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.props.handleKeyDown);\n  }\n\n  renderContent = () => {\n    const { experimentId, runItems } = this.props;\n    return (\n      <div>\n        {runItems.map(({ name, runId, color, y }, index) => {\n          const key = `${runId}-${index}`;\n          const to = Routes.getRunPageRoute(experimentId, runId);\n          return (\n            <Link key={key} to={to}>\n              <p style={{ color }}>\n                <i className=\"fas fa-external-link-o\" style={{ marginRight: 5 }} />\n                {`${name}, ${Utils.formatMetric(y)}`}\n              </p>\n            </Link>\n          );\n        })}\n      </div>\n    );\n  };\n\n  renderTitle = () => {\n    const { handleClose } = this.props;\n    return (\n      <div>\n        <span>Jump to individual runs</span>\n        <IconButton\n          icon={<i className=\"fas fa-times\" />}\n          // @ts-expect-error TS(2322): Type '{ icon: Element; onClick: (...args: any[]) =... Remove this comment to see the full error message\n          onClick={handleClose}\n          style={{ float: 'right', marginLeft: '7px' }}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    const { visible, x, y, handleVisibleChange } = this.props;\n    return (\n      <LegacyPopover\n        content={this.renderContent()}\n        title={this.renderTitle()}\n        placement=\"left\"\n        visible={visible}\n        onVisibleChange={handleVisibleChange}\n      >\n        <div\n          style={{\n            left: x,\n            top: y,\n            position: 'absolute',\n          }}\n        />\n      </LegacyPopover>\n    );\n  }\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Utils from '../../common/utils/Utils';\nimport RequestStateWrapper from '../../common/components/RequestStateWrapper';\nimport { getMetricHistoryApi, getRunApi } from '../actions';\nimport _ from 'lodash';\nimport { MetricsPlotView } from './MetricsPlotView';\nimport { getRunInfo } from '../reducers/Reducers';\nimport { MetricsPlotControls, X_AXIS_WALL, X_AXIS_RELATIVE, X_AXIS_STEP } from './MetricsPlotControls';\nimport MetricsSummaryTable from './MetricsSummaryTable';\nimport qs from 'qs';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport Routes from '../routes';\nimport { RunLinksPopover } from './RunLinksPopover';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { saveAs } from 'file-saver';\nimport { Spinner } from '@databricks/design-system';\nimport { normalizeMetricsHistoryEntry } from '../utils/MetricsUtils';\nimport type { Location, NavigateFunction } from '../../common/utils/RoutingUtils';\n\nexport const CHART_TYPE_LINE = 'line';\nexport const CHART_TYPE_BAR = 'bar';\n\nexport const METRICS_PLOT_POLLING_INTERVAL_MS = 10 * 1000; // 10 seconds\n// A run is considered as 'hanging' if its status is 'RUNNING' but its latest metric was logged\n// prior to this threshold. The metrics plot doesn't automatically update hanging runs.\nexport const METRICS_PLOT_HANGING_RUN_THRESHOLD_MS = 3600 * 24 * 7 * 1000; // 1 week\nconst MAXIMUM_METRIC_DATA_POINTS = 100_000;\nconst GET_METRIC_HISTORY_MAX_RESULTS = 25000;\n\nexport const convertMetricsToCsv = (metrics: any) => {\n  const header = ['run_id', ...Object.keys(metrics[0].history[0])];\n  const rows = metrics.flatMap(({ runUuid, history }: any) =>\n    history.map((metric: any) => [runUuid, ...Object.values(metric)]),\n  );\n  return [header]\n    .concat(rows)\n    .map((row) => row.join(','))\n    .join('\\n');\n};\n\ntype OwnMetricsPlotPanelProps = {\n  experimentIds: string[];\n  runUuids: string[];\n  completedRunUuids: string[];\n  metricKey: string;\n  latestMetricsByRunUuid: any;\n  distinctMetricKeys: string[];\n  metricsWithRunInfoAndHistory: any[];\n  getMetricHistoryApi: (...args: any[]) => any;\n  getRunApi: (...args: any[]) => any;\n  location: Location;\n  navigate: NavigateFunction;\n  runDisplayNames: string[];\n  containsInfinities: boolean;\n};\n\ntype MetricsPlotPanelState = any;\n\ntype MetricsPlotPanelProps = OwnMetricsPlotPanelProps & typeof MetricsPlotPanel.defaultProps;\n\nexport class MetricsPlotPanel extends React.Component<MetricsPlotPanelProps, MetricsPlotPanelState> {\n  _isMounted = false;\n\n  static defaultProps = {\n    containsInfinities: false,\n  };\n\n  displayPopover: any;\n  intervalId: any;\n\n  // The fields below are exposed as instance attributes rather than component state so that they\n  // can be updated without triggering a rerender.\n  //\n  // ID of Javascript future (created via setTimeout()) used to trigger legend-click events after a\n  // delay, to allow time for double-click events to occur\n  legendClickTimeout = null;\n  // Time (millis after Unix epoch) since last legend click - if two clicks occur in short\n  // succession, we trigger a double-click event & cancel the pending single-click.\n  prevLegendClickTime = (Math as any).inf;\n\n  // Last curve ID clicked in the legend, used to determine if we're double-clicking on a specific\n  // legend curve\n  lastClickedLegendCurveId = null;\n\n  // Max time interval (in milliseconds) between two successive clicks on the metric plot legend\n  // that constitutes a double-click\n  MAX_DOUBLE_CLICK_INTERVAL_MS = 300;\n\n  // Delay (in ms) between when a user clicks on the metric plot legend & when event-handler logic\n  // (to toggle display of the selected curve on or off) actually fires. Set to a larger value than\n  // MAX_DOUBLE_CLICK_INTERVAL_MS to allow time for the double-click handler to fire before firing\n  // a single-click event.\n  SINGLE_CLICK_EVENT_DELAY_MS = this.MAX_DOUBLE_CLICK_INTERVAL_MS + 10;\n\n  constructor(props: MetricsPlotPanelProps) {\n    super(props);\n    this.state = {\n      historyRequestIds: [],\n      popoverVisible: false,\n      popoverX: 0,\n      popoverY: 0,\n      popoverRunItems: [],\n      focused: true,\n      loading: false,\n    };\n    this.displayPopover = false;\n    this.intervalId = null;\n  }\n\n  hasMultipleExperiments() {\n    return this.props.experimentIds && this.props.experimentIds.length > 1;\n  }\n\n  onFocus = () => {\n    this.setState({ focused: true });\n  };\n\n  onBlur = () => {\n    this.setState({ focused: false });\n  };\n\n  clearEventListeners = () => {\n    // `window.removeEventListener` does nothing when called with an unregistered event listener:\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n    window.removeEventListener('focus', this.onFocus);\n    window.removeEventListener('blur', this.onBlur);\n  };\n\n  clearInterval = () => {\n    // `clearInterval` does nothing when called with `null` or `undefine`:\n    // https://www.w3.org/TR/2011/WD-html5-20110525/timers.html#dom-windowtimers-cleartimeout\n    clearInterval(this.intervalId);\n    this.intervalId = null;\n  };\n\n  allRunsCompleted = () => {\n    return this.props.completedRunUuids.length === this.props.runUuids.length;\n  };\n\n  isHangingRunUuid = (activeRunUuid: any) => {\n    const metrics = this.props.latestMetricsByRunUuid[activeRunUuid];\n    if (!metrics) {\n      return false;\n    }\n    // @ts-expect-error TS(2345): Argument of type '({ timestamp }: { timestamp: any... Remove this comment to see the full error message\n    const timestamps = Object.values(metrics).map(({ timestamp }) => timestamp);\n    // @ts-expect-error TS(2345): Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n    const latestTimestamp = Math.max(...timestamps);\n    return new Date().getTime() - latestTimestamp > METRICS_PLOT_HANGING_RUN_THRESHOLD_MS;\n  };\n\n  getActiveRunUuids = () => {\n    const { completedRunUuids, runUuids } = this.props;\n    const activeRunUuids = _.difference(runUuids, completedRunUuids);\n    return activeRunUuids.filter(_.negate(this.isHangingRunUuid)); // Exclude hanging runs\n  };\n\n  shouldPoll = () => {\n    return !(this.allRunsCompleted() || this.getActiveRunUuids().length === 0);\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.loadMetricHistory(this.props.runUuids, this.getUrlState().selectedMetricKeys);\n    if (this.shouldPoll()) {\n      // Set event listeners to detect when this component gains/loses focus,\n      // e.g., a user switches to a different browser tab or app.\n      window.addEventListener('blur', this.onBlur);\n      window.addEventListener('focus', this.onFocus);\n      this.intervalId = setInterval(() => {\n        // Skip polling if this component is out of focus.\n        // @ts-expect-error TS(4111): Property 'focused' comes from an index signature, ... Remove this comment to see the full error message\n        if (this.state.focused) {\n          const activeRunUuids = this.getActiveRunUuids();\n          this.loadMetricHistory(activeRunUuids, this.getUrlState().selectedMetricKeys);\n          this.loadRuns(activeRunUuids);\n\n          if (!this.shouldPoll()) {\n            this.clearEventListeners();\n            this.clearInterval();\n          }\n        }\n      }, METRICS_PLOT_POLLING_INTERVAL_MS);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.clearEventListeners();\n    this.clearInterval();\n  }\n\n  getUrlState() {\n    return Utils.getMetricPlotStateFromUrl(this.props.location.search);\n  }\n\n  static predictChartType(metrics: any) {\n    // Show bar chart when every metric has exactly 1 metric history\n    if (metrics && metrics.length && _.every(metrics, (metric) => metric.history && metric.history.length === 1)) {\n      return CHART_TYPE_BAR;\n    }\n    return CHART_TYPE_LINE;\n  }\n\n  static isComparing(search: any) {\n    const params = qs.parse(search);\n    const runs = params && params['?runs'];\n    // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n    return runs ? JSON.parse(runs).length > 1 : false;\n  }\n\n  // Update page URL from component state. Intended to be called after React applies component\n  // state updates, e.g. in a setState callback\n  updateUrlState = (updatedState: any) => {\n    const { runUuids, metricKey, location, navigate } = this.props;\n    // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n    const experimentIds = JSON.parse(qs.parse(location.search)['experiments']);\n    const newState = {\n      ...this.getUrlState(),\n      ...updatedState,\n    };\n    const {\n      selectedXAxis,\n      selectedMetricKeys,\n      showPoint,\n      yAxisLogScale,\n      lineSmoothness,\n      layout,\n      deselectedCurves,\n      lastLinearYAxisRange,\n    } = newState;\n    navigate(\n      Routes.getMetricPageRoute(\n        runUuids,\n        metricKey,\n        experimentIds,\n        selectedMetricKeys,\n        layout,\n        selectedXAxis,\n        yAxisLogScale,\n        lineSmoothness,\n        showPoint,\n        deselectedCurves,\n        lastLinearYAxisRange,\n      ),\n      {\n        replace: true,\n      },\n    );\n  };\n\n  getNumTotalMetrics = () => {\n    return this.props.metricsWithRunInfoAndHistory.map(({ history }) => history.length).reduce((a, b) => a + b, 0);\n  };\n\n  loadMetricHistory = (runUuids: any, metricKeys: any) => {\n    if (this.getNumTotalMetrics() >= MAXIMUM_METRIC_DATA_POINTS) {\n      Utils.logErrorAndNotifyUser(\n        'The total number of metric data points exceeded 100,000. Cannot fetch more metrics.',\n      );\n      return Promise.resolve([]);\n    }\n    this.setState({ loading: true });\n    const promises = runUuids\n      .flatMap((id: any) =>\n        metricKeys.map((key: any) => ({\n          runUuid: id,\n          metricKey: key,\n        })),\n      )\n      // Avoid fetching non existing metrics\n      .filter(({ runUuid, metricKey }: any) => this.props.latestMetricsByRunUuid[runUuid].hasOwnProperty(metricKey))\n      .map(async ({ runUuid, metricKey }: any) => {\n        const requestIds = [];\n        const id = getUUID();\n        requestIds.push(id);\n        const firstPageResp = await this.props.getMetricHistoryApi(\n          runUuid,\n          metricKey,\n          GET_METRIC_HISTORY_MAX_RESULTS,\n          undefined,\n          id,\n        );\n\n        let nextPageToken = firstPageResp.value.next_page_token;\n        while (nextPageToken) {\n          if (this.getNumTotalMetrics() >= MAXIMUM_METRIC_DATA_POINTS) {\n            return { requestIds, success: false };\n          }\n\n          const uid = getUUID();\n          requestIds.push(uid);\n          /* eslint-disable no-await-in-loop */\n          const nextPageResp = await this.props.getMetricHistoryApi(\n            runUuid,\n            metricKey,\n            GET_METRIC_HISTORY_MAX_RESULTS,\n            nextPageToken,\n            uid,\n          );\n          nextPageToken = nextPageResp.value.next_page_token;\n        }\n        return { requestIds, success: true };\n      });\n    return Promise.all(promises).then((results) => {\n      // Ensure we don't set state if component is unmounted\n      if (this._isMounted) {\n        this.setState({ loading: false });\n      }\n      if (!results.every(({ success }) => success)) {\n        Utils.logErrorAndNotifyUser(\n          'The total number of metric data points exceeded 100,000. Aborted fetching metrics.',\n        );\n      }\n      return results.flatMap(({ requestIds }) => requestIds);\n    });\n  };\n\n  loadRuns = (runUuids: any) => {\n    const requestIds: any = [];\n    runUuids.forEach((runUuid: any) => {\n      const id = getUUID();\n      this.props.getRunApi(runUuid);\n      requestIds.push(id);\n    });\n    return requestIds;\n  };\n\n  getMetrics = () => {\n    /* eslint-disable no-param-reassign */\n    const state = this.getUrlState();\n    const selectedMetricsSet = new Set(state.selectedMetricKeys);\n    const { selectedXAxis } = state;\n    const { metricsWithRunInfoAndHistory } = this.props;\n\n    // Take only selected metrics\n    const metrics = metricsWithRunInfoAndHistory.filter((m) => selectedMetricsSet.has(m.metricKey));\n\n    // Sort metric history based on selected x-axis\n    metrics.forEach((metric) => {\n      const isStep = selectedXAxis === X_AXIS_STEP && metric.history[0] && _.isNumber(metric.history[0].step);\n      // Metric history can be large. Doing an in-place here to save memory\n      metric.history.sort(isStep ? Utils.compareByStepAndTimestamp : Utils.compareByTimestamp);\n    });\n\n    return metrics;\n  };\n\n  /**\n   * Handle changes in the scale type of the y-axis\n   * @param yAxisLogScale: Boolean - if true, y-axis should be converted to log scale, and if false,\n   * y-axis scale should be converted to a linear scale.\n   */\n  handleYAxisLogScaleChange = (yAxisLogScale: any) => {\n    const state = this.getUrlState();\n    const newLayout = _.cloneDeep(state.layout);\n    const newAxisType = yAxisLogScale ? 'log' : 'linear';\n\n    // Handle special case of a linear y-axis scale with negative values converted to log scale &\n    // now being restored to linear scale, by restoring the old linear-axis range from\n    // state.linearYAxisRange. In particular, we assume that if state.linearYAxisRange\n    // is non-empty, it contains a linear y axis range with negative values.\n    if (!yAxisLogScale && (state as any).lastLinearYAxisRange && (state as any).lastLinearYAxisRange.length > 0) {\n      newLayout.yaxis = {\n        type: 'linear',\n        range: (state as any).lastLinearYAxisRange,\n      };\n      this.updateUrlState({ layout: newLayout, lastLinearYAxisRange: [] });\n      return;\n    }\n\n    // Otherwise, if plot previously had no y axis range configured, simply set the axis type to\n    // log or linear scale appropriately\n    if (!state.layout.yaxis || !state.layout.yaxis.range) {\n      newLayout.yaxis = {\n        type: newAxisType,\n        autorange: true,\n        ...(newAxisType === 'log' ? { exponentformat: 'e' } : {}),\n      };\n      this.updateUrlState({ layout: newLayout, lastLinearYAxisRange: [] });\n      return;\n    }\n\n    // lastLinearYAxisRange contains the last range used for a linear-scale y-axis. We set\n    // this state attribute if and only if we're converting from a linear-scale y-axis with\n    // negative bounds to a log scale axis, so that we can restore the negative bounds if we\n    // subsequently convert back to a linear scale axis. Otherwise, we reset this attribute to an\n    // empty array\n    let lastLinearYAxisRange = [];\n\n    // At this point, we know the plot previously had a y axis specified with range bounds\n    // Convert the range to/from log scale as appropriate\n    const oldLayout = state.layout;\n    const oldYRange = oldLayout.yaxis.range;\n    if (yAxisLogScale) {\n      if (oldYRange[0] <= 0) {\n        lastLinearYAxisRange = oldYRange;\n        // When converting to log scale, handle negative values (which have no log-scale\n        // representation as taking the log of a negative number is not possible) as follows:\n        // If bottom of old Y range is negative, then tell plotly to infer the log y-axis scale\n        // (set 'autorange' to true), and preserve the old range in the lastLinearYAxisRange\n        // state attribute so that we can restore it if the user converts back to a linear-scale\n        // y axis. We defer to Plotly's autorange here under the assumption that it will produce\n        // a reasonable y-axis log scale for plots containing negative values.\n        newLayout.yaxis = {\n          type: 'log',\n          autorange: true,\n          exponentformat: 'e',\n        };\n      } else {\n        newLayout.yaxis = {\n          type: 'log',\n          range: [Math.log(oldYRange[0]) / Math.log(10), Math.log(oldYRange[1]) / Math.log(10)],\n          exponentformat: 'e',\n        };\n      }\n    } else {\n      // Otherwise, convert from log to linear scale normally\n      newLayout.yaxis = {\n        type: 'linear',\n        range: [Math.pow(10, oldYRange[0]), Math.pow(10, oldYRange[1])],\n      };\n    }\n    this.updateUrlState({ layout: newLayout, lastLinearYAxisRange });\n  };\n\n  /**\n   * Handle changes in the type of the metric plot's X axis (e.g. changes from wall-clock\n   * scale to relative-time scale to step-based scale).\n   * @param e: Selection event such that e.target.value is a string containing the new X axis type\n   */\n  handleXAxisChange = (e: any) => {\n    // Set axis value type, & reset axis scaling via autorange\n    const state = this.getUrlState();\n    const axisEnumToPlotlyType = {\n      [X_AXIS_WALL]: 'date',\n      [X_AXIS_RELATIVE]: 'linear',\n      [X_AXIS_STEP]: 'linear',\n    };\n    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const axisType = axisEnumToPlotlyType[e.target.value] || 'linear';\n    const newLayout = {\n      ...state.layout,\n      xaxis: {\n        autorange: true,\n        type: axisType,\n      },\n    };\n    this.updateUrlState({ selectedXAxis: e.target.value, layout: newLayout });\n  };\n\n  getAxisType() {\n    const state = this.getUrlState();\n    return state.layout && state.layout.yaxis && state.layout.yaxis.type === 'log' ? 'log' : 'linear';\n  }\n\n  /**\n   * Handle changes to metric plot layout (x & y axis ranges), e.g. specifically if the user\n   * zooms in or out on the plot.\n   *\n   * @param newLayout: Object containing the new Plot layout. See\n   * https://plot.ly/javascript/plotlyjs-events/#update-data for details on the object's fields\n   * and schema.\n   */\n  handleLayoutChange = (newLayout: any) => {\n    this.displayPopover = false;\n    const state = this.getUrlState();\n    // Unfortunately, we need to parse out the x & y axis range changes from the onLayout event...\n    // see https://plot.ly/javascript/plotlyjs-events/#update-data\n    const {\n      'xaxis.range[0]': newXRange0,\n      'xaxis.range[1]': newXRange1,\n      'yaxis.range[0]': newYRange0,\n      'yaxis.range[1]': newYRange1,\n      'xaxis.autorange': xAxisAutorange,\n      'yaxis.autorange': yAxisAutorange,\n      'yaxis.showspikes': yAxisShowSpikes,\n      'xaxis.showspikes': xAxisShowSpikes,\n      ...restFields\n    } = newLayout;\n\n    let mergedLayout = {\n      ...state.layout,\n      ...restFields,\n    };\n    let lastLinearYAxisRange = [...(state as any).lastLinearYAxisRange];\n\n    // Set fields for x axis\n    const newXAxis = mergedLayout.xaxis || {};\n    if (newXRange0 !== undefined && newXRange1 !== undefined) {\n      newXAxis.range = [newXRange0, newXRange1];\n      newXAxis.autorange = false;\n    }\n    if (xAxisShowSpikes) {\n      newXAxis.showspikes = true;\n    }\n    if (xAxisAutorange) {\n      newXAxis.autorange = true;\n    }\n    // Set fields for y axis\n    const newYAxis = mergedLayout.yaxis || {};\n    if (newYRange0 !== undefined && newYRange1 !== undefined) {\n      newYAxis.range = [newYRange0, newYRange1];\n      newYAxis.autorange = false;\n    }\n    if (yAxisShowSpikes) {\n      newYAxis.showspikes = true;\n    }\n    if (yAxisAutorange) {\n      lastLinearYAxisRange = [];\n      const axisType = state.layout && state.layout.yaxis && state.layout.yaxis.type === 'log' ? 'log' : 'linear';\n      newYAxis.autorange = true;\n      newYAxis.type = axisType;\n    }\n    if (newYAxis.type === 'log') {\n      newYAxis.exponentformat = 'e';\n    }\n    // Merge new X & Y axis info into layout\n    mergedLayout = {\n      ...mergedLayout,\n      xaxis: newXAxis,\n      yaxis: newYAxis,\n    };\n    this.updateUrlState({ layout: mergedLayout, lastLinearYAxisRange });\n  };\n\n  handleDownloadCsv = () => {\n    const csv = convertMetricsToCsv(this.props.metricsWithRunInfoAndHistory);\n    const blob = new Blob([csv], { type: 'application/csv;charset=utf-8' });\n    saveAs(blob, 'metrics.csv');\n  };\n\n  // Return unique key identifying the curve or bar chart corresponding to the specified\n  // Plotly plot data element\n  static getCurveKey(plotDataElem: any) {\n    // In bar charts, each legend item consists of a single run ID (all bars for that run are\n    // associated with & toggled by that legend item)\n    if (plotDataElem.type === 'bar') {\n      return plotDataElem.runId;\n    } else {\n      // In line charts, each (run, metricKey) tuple has its own legend item, so construct\n      // a unique legend item identifier by concatenating the run id & metric key\n      return Utils.getCurveKey(plotDataElem.runId, plotDataElem.metricName);\n    }\n  }\n\n  /**\n   * Handle clicking on a single curve within the plot legend in order to toggle its display\n   * on/off.\n   */\n  handleLegendClick = ({ curveNumber, data }: any) => {\n    // If two clicks in short succession, trigger double-click event\n    const state = this.getUrlState();\n    const currentTime = Date.now();\n    if (\n      currentTime - this.prevLegendClickTime < this.MAX_DOUBLE_CLICK_INTERVAL_MS &&\n      curveNumber === this.lastClickedLegendCurveId\n    ) {\n      this.handleLegendDoubleClick({ curveNumber, data });\n      this.prevLegendClickTime = (Math as any).inf;\n    } else {\n      // Otherwise, record time of current click & trigger click event\n      // Wait full double-click window to trigger setting state, and only if there was no\n      // double-click do we run the single-click logic (we wait a little extra to be safe)\n      const curveKey = MetricsPlotPanel.getCurveKey(data[curveNumber]);\n      // @ts-expect-error TS(2322): Type 'number' is not assignable to type 'null'.\n      this.legendClickTimeout = window.setTimeout(() => {\n        const existingDeselectedCurves = new Set((state as any).deselectedCurves);\n        if (existingDeselectedCurves.has(curveKey)) {\n          existingDeselectedCurves.delete(curveKey);\n        } else {\n          existingDeselectedCurves.add(curveKey);\n        }\n        this.updateUrlState({ deselectedCurves: Array.from(existingDeselectedCurves) });\n      }, this.SINGLE_CLICK_EVENT_DELAY_MS);\n      this.prevLegendClickTime = currentTime;\n    }\n    this.lastClickedLegendCurveId = curveNumber;\n    // Return false to disable plotly event handler\n    return false;\n  };\n\n  /**\n   * Handle double-clicking on a single curve within the plot legend in order to toggle display\n   * of the selected curve on (and disable display of all other curves).\n   */\n  handleLegendDoubleClick = ({ curveNumber, data }: any) => {\n    // @ts-expect-error TS(2769): No overload matches this call.\n    window.clearTimeout(this.legendClickTimeout);\n    // Exclude everything besides the current curve key\n    const curveKey = MetricsPlotPanel.getCurveKey(data[curveNumber]);\n    const allCurveKeys = data.map((elem: any) => MetricsPlotPanel.getCurveKey(elem));\n    const newDeselectedCurves = allCurveKeys.filter((curvePair: any) => curvePair !== curveKey);\n    this.updateUrlState({ deselectedCurves: newDeselectedCurves });\n    return false;\n  };\n\n  handleMetricsSelectChange = (metricKeys: any) => {\n    const existingMetricKeys = this.getUrlState().selectedMetricKeys || [];\n    const newMetricKeys = metricKeys.filter((k: any) => !existingMetricKeys.includes(k));\n    this.updateUrlState({ selectedMetricKeys: metricKeys });\n    this.loadMetricHistory(this.props.runUuids, newMetricKeys).then((requestIds) => {\n      this.setState({ loading: false });\n      this.setState((prevState: any) => ({\n        historyRequestIds: [...prevState.historyRequestIds, ...requestIds],\n      }));\n    });\n  };\n\n  handleShowPointChange = (showPoint: any) => this.updateUrlState({ showPoint });\n\n  handleLineSmoothChange = (lineSmoothness: any) => this.updateUrlState({ lineSmoothness });\n\n  handleKeyDownOnPopover = ({ key }: any) => {\n    if (key === 'Escape') {\n      this.setState({ popoverVisible: false });\n    }\n  };\n\n  updatePopover = (data: any) => {\n    this.displayPopover = !this.displayPopover;\n\n    // Ignore double click.\n    setTimeout(() => {\n      if (this.displayPopover) {\n        this.displayPopover = false;\n        const { popoverVisible, popoverX, popoverY } = this.state;\n        const {\n          points,\n          event: { clientX, clientY },\n        } = data;\n        const samePointClicked = popoverX === clientX && popoverY === clientY;\n        const runItems = points\n          .sort((a: any, b: any) => b.y - a.y)\n          .map((point: any) => ({\n            runId: point.data.runId,\n            name: point.data.name,\n            color: point.fullData.marker.color,\n            y: point.y,\n          }));\n\n        this.setState({\n          popoverVisible: !popoverVisible || !samePointClicked,\n          popoverX: clientX,\n          popoverY: clientY,\n          popoverRunItems: runItems,\n        });\n      }\n    }, 300);\n  };\n\n  render() {\n    const { experimentIds, runUuids, runDisplayNames, distinctMetricKeys, location } = this.props;\n    const { popoverVisible, popoverX, popoverY, popoverRunItems, loading } = this.state;\n    const state = this.getUrlState();\n    const { showPoint, selectedXAxis, selectedMetricKeys, lineSmoothness } = state;\n    const yAxisLogScale = this.getAxisType() === 'log';\n    const { historyRequestIds } = this.state;\n    const metrics = this.getMetrics();\n    const chartType = MetricsPlotPanel.predictChartType(metrics);\n    return (\n      <div className=\"metrics-plot-container\">\n        <MetricsPlotControls\n          // @ts-expect-error TS(2322): Type '{ numRuns: number; numCompletedRuns: number;... Remove this comment to see the full error message\n          numRuns={this.props.runUuids.length}\n          numCompletedRuns={this.props.completedRunUuids.length}\n          distinctMetricKeys={distinctMetricKeys}\n          selectedXAxis={selectedXAxis}\n          selectedMetricKeys={selectedMetricKeys}\n          handleXAxisChange={this.handleXAxisChange}\n          handleMetricsSelectChange={this.handleMetricsSelectChange}\n          handleShowPointChange={this.handleShowPointChange}\n          handleYAxisLogScaleChange={this.handleYAxisLogScaleChange}\n          handleLineSmoothChange={this.handleLineSmoothChange}\n          chartType={chartType}\n          initialLineSmoothness={lineSmoothness}\n          yAxisLogScale={yAxisLogScale}\n          showPoint={showPoint}\n          handleDownloadCsv={this.handleDownloadCsv}\n          disableSmoothnessControl={this.props.containsInfinities}\n        />\n        <div className=\"metrics-plot-data\">\n          <RequestStateWrapper\n            requestIds={historyRequestIds}\n            // In this case where there are no history request IDs (e.g. on the\n            // initial page load / before we try to load additional metrics),\n            // optimistically render the children\n            shouldOptimisticallyRender={historyRequestIds.length === 0}\n          >\n            {this.hasMultipleExperiments() ? null : (\n              <RunLinksPopover\n                experimentId={experimentIds[0]}\n                visible={popoverVisible}\n                x={popoverX}\n                y={popoverY}\n                runItems={popoverRunItems}\n                handleKeyDown={this.handleKeyDownOnPopover}\n                handleClose={() => this.setState({ popoverVisible: false })}\n                handleVisibleChange={(visible) => this.setState({ popoverVisible: visible })}\n              />\n            )}\n            <Spinner size=\"large\" css={{ visibility: loading ? 'visible' : 'hidden' }} />\n            <MetricsPlotView\n              // @ts-expect-error TS(2322): Type '{ runUuids: string[]; runDisplayNames: strin... Remove this comment to see the full error message\n              runUuids={runUuids}\n              runDisplayNames={runDisplayNames}\n              xAxis={selectedXAxis}\n              metrics={this.getMetrics()}\n              metricKeys={selectedMetricKeys}\n              showPoint={showPoint}\n              chartType={chartType}\n              isComparing={MetricsPlotPanel.isComparing(location.search)}\n              lineSmoothness={lineSmoothness}\n              extraLayout={state.layout}\n              deselectedCurves={(state as any).deselectedCurves}\n              onLayoutChange={this.handleLayoutChange}\n              onClick={this.updatePopover}\n              onLegendClick={this.handleLegendClick}\n              onLegendDoubleClick={this.handleLegendDoubleClick}\n            />\n            <MetricsSummaryTable\n              runUuids={runUuids}\n              runDisplayNames={runDisplayNames}\n              metricKeys={selectedMetricKeys}\n            />\n          </RequestStateWrapper>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids } = ownProps;\n  const completedRunUuids = runUuids.filter((runUuid: any) => getRunInfo(runUuid, state).status !== 'RUNNING');\n  const { latestMetricsByRunUuid, metricsByRunUuid } = state.entities;\n\n  // All metric keys from all runUuids, non-distinct\n  const metricKeys = _.flatMap(runUuids, (runUuid) => {\n    const latestMetrics = latestMetricsByRunUuid[runUuid];\n    return latestMetrics ? Object.keys(latestMetrics) : [];\n  });\n  const distinctMetricKeys = [...new Set(metricKeys)].sort();\n  const runDisplayNames: any = [];\n\n  let containsInfinities = false;\n\n  // Flat array of all metrics, with history and information of the run it belongs to\n  // This is used for underlying MetricsPlotView & predicting chartType for MetricsPlotControls\n  const metricsWithRunInfoAndHistory = _.flatMap(runUuids, (runUuid) => {\n    const runDisplayName = Utils.getRunDisplayName(getRunInfo(runUuid, state), runUuid);\n    runDisplayNames.push(runDisplayName);\n    const metricsHistory = metricsByRunUuid[runUuid];\n    return metricsHistory\n      ? Object.keys(metricsHistory).map((metricKey) => {\n          const history = metricsHistory[metricKey].map((entry: any) => normalizeMetricsHistoryEntry(entry));\n          if (history.some(({ value }: any) => typeof value === 'number' && !isNaN(value) && !isFinite(value))) {\n            containsInfinities = true;\n          }\n          return { metricKey, history, runUuid, runDisplayName };\n        })\n      : [];\n  });\n\n  return {\n    runDisplayNames,\n    latestMetricsByRunUuid,\n    distinctMetricKeys,\n    metricsWithRunInfoAndHistory,\n    completedRunUuids,\n    containsInfinities,\n  };\n};\n\nconst mapDispatchToProps = { getMetricHistoryApi, getRunApi };\n\nexport default withRouterNext(connect(mapStateToProps, mapDispatchToProps)(MetricsPlotPanel));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../common/utils/Utils';\nimport _ from 'lodash';\nimport { saveAs } from 'file-saver';\nimport { X_AXIS_STEP, X_AXIS_RELATIVE, MAX_LINE_SMOOTHNESS } from './MetricsPlotControls';\nimport { CHART_TYPE_BAR, convertMetricsToCsv } from './MetricsPlotPanel';\nimport { LazyPlot } from './LazyPlot';\nimport { generateInfinityAnnotations } from '../utils/MetricsUtils';\nimport { injectIntl } from 'react-intl';\n\nconst MAX_RUN_NAME_DISPLAY_LENGTH = 24;\nconst EMA_THRESHOLD = 1;\n\nexport const EMA = (mArray: any, smoothingWeight: any) => {\n  // If all elements in the set of metric values are constant, or if\n  // the degree of smoothing is set to the minimum value, return the\n  // original set of metric values\n  if (smoothingWeight <= 1 || !mArray || mArray.length <= EMA_THRESHOLD || mArray.every((v: any) => v === mArray[0])) {\n    return mArray;\n  }\n\n  const smoothness = smoothingWeight / (MAX_LINE_SMOOTHNESS + 1);\n  const smoothedArray = [];\n  let biasedElement = 0;\n  for (let i = 0; i < mArray.length; i++) {\n    if (!isNaN(mArray[i])) {\n      biasedElement = biasedElement * smoothness + (1 - smoothness) * mArray[i];\n      // To avoid biasing earlier elements toward smaller-than-accurate values, we divide\n      // all elements by a `debiasedWeight` that asymptotically increases and approaches\n      // 1 as the element index increases\n      const debiasWeight = 1.0 - Math.pow(smoothness, i + 1);\n      const debiasedElement = biasedElement / debiasWeight;\n      smoothedArray.push(debiasedElement);\n    } else {\n      smoothedArray.push(mArray[i]);\n    }\n  }\n  return smoothedArray;\n};\n\n// To avoid pulling in plotly.js (unlazily) and / or using a separate package, just duplicating here\n// Copied from https://github.com/plotly/plotly.js/blob/v2.5.1/src/fonts/ploticon.js#L100\nconst DISK_ICON = {\n  width: 857.1,\n  height: 1000,\n  // eslint-disable-next-line max-len\n  path: 'm214-7h429v214h-429v-214z m500 0h72v500q0 8-6 21t-11 20l-157 156q-5 6-19 12t-22 5v-232q0-22-15-38t-38-16h-322q-22 0-37 16t-16 38v232h-72v-714h72v232q0 22 16 38t37 16h465q22 0 38-16t15-38v-232z m-214 518v178q0 8-5 13t-13 5h-107q-7 0-13-5t-5-13v-178q0-8 5-13t13-5h107q7 0 13 5t5 13z m357-18v-518q0-22-15-38t-38-16h-750q-23 0-38 16t-16 38v750q0 22 16 38t38 16h517q23 0 50-12t42-26l156-157q16-15 27-42t11-49z',\n  transform: 'matrix(1 0 0 -1 0 850)',\n};\n\ntype MetricsPlotViewImplProps = {\n  runUuids: string[];\n  runDisplayNames: string[];\n  metrics: any[];\n  xAxis: string;\n  metricKeys: string[];\n  showPoint: boolean;\n  chartType: string;\n  isComparing: boolean;\n  lineSmoothness?: number;\n  extraLayout?: any;\n  onLayoutChange: (...args: any[]) => any;\n  onClick: (...args: any[]) => any;\n  onLegendClick: (...args: any[]) => any;\n  onLegendDoubleClick: (...args: any[]) => any;\n  deselectedCurves: string[];\n  intl?: any;\n};\n\nexport class MetricsPlotViewImpl extends React.Component<MetricsPlotViewImplProps> {\n  static getLineLegend = (metricKey: any, runDisplayName: any, isComparing: any) => {\n    let legend = metricKey;\n    if (isComparing) {\n      legend += `, ${Utils.truncateString(runDisplayName, MAX_RUN_NAME_DISPLAY_LENGTH)}`;\n    }\n    return legend;\n  };\n\n  static getXValuesForLineChart(history: any, xAxisType: any) {\n    if (history.length === 0) {\n      return [];\n    }\n    switch (xAxisType) {\n      case X_AXIS_STEP:\n        return history.map(({ step }: any) => step);\n      case X_AXIS_RELATIVE: {\n        // @ts-expect-error TS(2339): Property 'timestamp' does not exist on type '{ toS... Remove this comment to see the full error message\n        const { timestamp: minTimestamp } = _.minBy(history, 'timestamp');\n        return history.map(({ timestamp }: any) => (timestamp - minTimestamp) / 1000);\n      }\n      default: // X_AXIS_WALL\n        return history.map(({ timestamp }: any) => Utils.formatTimestamp(timestamp));\n    }\n  }\n\n  /**\n   * Regenerates annotations and shapes for infinity and NaN values.\n   * Best called infrequently. Ideally should be called only when data input changes.\n   */\n  regenerateInfinityAnnotations = () => {\n    const { metrics, xAxis, extraLayout } = this.props;\n    const isYAxisLog = extraLayout?.yaxis?.type === 'log';\n    const annotationData = {};\n\n    metrics.forEach((metric) => {\n      const { metricKey, history } = metric;\n      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      annotationData[metricKey] = generateInfinityAnnotations({\n        xValues: (MetricsPlotView as any).getXValuesForLineChart(history, xAxis),\n        yValues: history.map((entry: any) => (typeof entry.value === 'number' ? entry.value : Number(entry.value))),\n        isLogScale: isYAxisLog,\n        stringFormatter: (value) => this.props.intl.formatMessage(value, { metricKey }),\n      });\n    });\n\n    this.#annotationData = annotationData;\n  };\n\n  #annotationData = {};\n\n  getPlotPropsForLineChart = () => {\n    const { metrics, xAxis, showPoint, lineSmoothness, isComparing, deselectedCurves } = this.props;\n\n    const deselectedCurvesSet = new Set(deselectedCurves);\n    const shapes: any = [];\n    const annotations: any = [];\n\n    const data = metrics.map((metric) => {\n      const { metricKey, runDisplayName, history, runUuid } = metric;\n      const historyValues = history.map((entry: any) =>\n        typeof entry.value === 'number' ? entry.value : Number(entry.value),\n      );\n      // For metrics with exactly one non-NaN item, we set `isSingleHistory` to `true` in order\n      // to display the item as a point. For metrics with zero non-NaN items (i.e., empty metrics),\n      // we also set `isSingleHistory` to `true` in order to populate the plot legend with a\n      // point-style entry for each empty metric, although no data will be plotted for empty\n      // metrics\n      const isSingleHistory = historyValues.filter((value: any) => !isNaN(value)).length <= 1;\n\n      const visible = !deselectedCurvesSet.has(Utils.getCurveKey(runUuid, metricKey)) ? true : 'legendonly';\n\n      if (this.#annotationData && metricKey in this.#annotationData && visible === true) {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        shapes.push(...this.#annotationData[metricKey].shapes);\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        annotations.push(...this.#annotationData[metricKey].annotations);\n      }\n\n      return {\n        name: (MetricsPlotView as any).getLineLegend(metricKey, runDisplayName, isComparing),\n        x: (MetricsPlotView as any).getXValuesForLineChart(history, xAxis),\n        y: (isSingleHistory ? historyValues : EMA(historyValues, lineSmoothness)).map((entry: any) =>\n          !isFinite(entry) ? NaN : entry,\n        ),\n        text: historyValues.map((value: any) => (isNaN(value) ? value : value.toFixed(5))),\n        type: 'scattergl',\n        mode: isSingleHistory ? 'markers' : 'lines+markers',\n        marker: { opacity: isSingleHistory || showPoint ? 1 : 0 },\n        hovertemplate: isSingleHistory || lineSmoothness === 1 ? '%{y}' : 'Value: %{text}<br>Smoothed: %{y}',\n        visible: visible,\n        runId: runUuid,\n        metricName: metricKey,\n      };\n    });\n    const props = { data };\n\n    (props as any).layout = {\n      ...(props as any).layout,\n      ...this.props.extraLayout,\n      shapes,\n      annotations,\n    };\n\n    return props;\n  };\n\n  getPlotPropsForBarChart = () => {\n    /* eslint-disable no-param-reassign */\n    const { runUuids, runDisplayNames, deselectedCurves } = this.props;\n\n    // A reverse lookup of `metricKey: { runUuid: value, metricKey }`\n    const historyByMetricKey = this.props.metrics.reduce((map, metric) => {\n      const { runUuid, metricKey, history } = metric;\n      const value = history[0] && history[0].value;\n      if (!map[metricKey]) {\n        map[metricKey] = { metricKey, [runUuid]: value };\n      } else {\n        map[metricKey][runUuid] = value;\n      }\n      return map;\n    }, {});\n\n    const arrayOfHistorySortedByMetricKey = _.sortBy(Object.values(historyByMetricKey), 'metricKey');\n\n    const sortedMetricKeys = arrayOfHistorySortedByMetricKey.map((history) => (history as any).metricKey);\n    const deselectedCurvesSet = new Set(deselectedCurves);\n    const data = runUuids.map((runUuid, i) => {\n      const visibility = deselectedCurvesSet.has(runUuid) ? { visible: 'legendonly' } : {};\n      return {\n        name: Utils.truncateString(runDisplayNames[i], MAX_RUN_NAME_DISPLAY_LENGTH),\n        x: sortedMetricKeys,\n        y: arrayOfHistorySortedByMetricKey.map((history) => (history as any)[runUuid]),\n        type: 'bar',\n        runId: runUuid,\n        ...visibility,\n      };\n    });\n\n    const layout = { barmode: 'group' };\n    const props = { data, layout };\n    props.layout = {\n      ...props.layout,\n      ...this.props.extraLayout,\n    };\n    return props;\n  };\n\n  componentDidMount() {\n    this.regenerateInfinityAnnotations();\n  }\n\n  componentDidUpdate() {\n    /**\n     * TODO: make sure that annotations are regenereated only when data changes.\n     * In fact, all internal recalculations should be done only then.\n     */\n    this.regenerateInfinityAnnotations();\n  }\n\n  render() {\n    const { onLayoutChange, onClick, onLegendClick, onLegendDoubleClick } = this.props;\n    const plotProps =\n      this.props.chartType === CHART_TYPE_BAR ? this.getPlotPropsForBarChart() : this.getPlotPropsForLineChart();\n\n    return (\n      <div className=\"metrics-plot-view-container\">\n        <LazyPlot\n          {...plotProps}\n          useResizeHandler\n          onRelayout={onLayoutChange}\n          onClick={onClick}\n          onLegendClick={onLegendClick}\n          onLegendDoubleClick={onLegendDoubleClick}\n          style={{ width: '100%', height: '100%' }}\n          layout={_.cloneDeep((plotProps as any).layout)}\n          config={{\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: ['sendDataToCloud'],\n            modeBarButtonsToAdd: [\n              {\n                name: 'Download plot data as CSV',\n                icon: DISK_ICON,\n                click: () => {\n                  const csv = convertMetricsToCsv(this.props.metrics);\n                  const blob = new Blob([csv], { type: 'application/csv;charset=utf-8' });\n                  saveAs(blob, 'metrics.csv');\n                },\n              },\n            ],\n          }}\n        />\n      </div>\n    );\n  }\n}\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const MetricsPlotView = injectIntl(MetricsPlotViewImpl);\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n"],"names":["IconButton","_ref","icon","className","style","restProps","_jsx","Button","componentId","type","padding","children","Plot","React","LazyPlot","props","SectionErrorBoundary","fallback","LegacySkeleton","active","LineSmoothSlider","max","min","step","marks","defaultValue","onChange","disabled","onAfterChange","theme","useDesignSystemTheme","sliderColor","colors","actionDisabledText","primary","_jsxs","css","_css","display","flexWrap","height","gap","spacing","md","paddingLeft","xs","Slider","Object","keys","length","width","value","trackStyle","background","handleStyle","borderColor","InputNumber","undefined","Progress","styles","wrapper","track","progressTrack","percent","format","alignItems","sm","backgroundColor","backgroundSecondary","flex","borderRadius","RadioGroup","Radio","Group","X_AXIS_WALL","X_AXIS_STEP","X_AXIS_RELATIVE","MAX_LINE_SMOOTHNESS","name","MetricsPlotControlsImpl","constructor","arguments","handleMetricsSelectFilterChange","text","option","title","toUpperCase","includes","getAllMetricKeys","distinctMetricKeys","this","map","metricKey","key","render","chartType","yAxisLogScale","initialLineSmoothness","showPoint","numRuns","numCompletedRuns","disableSmoothnessControl","lineSmoothnessTooltipText","FormattedMessage","id","defaultMessage","completedRunsTooltipText","values","interval","Math","round","METRICS_PLOT_POLLING_INTERVAL_MS","controlsWrapper","CHART_TYPE_LINE","centeredControlsWrapper","LegacyTooltip","QuestionMarkIcon","Switch","defaultChecked","handleShowPointChange","_","handleLineSmoothChange","xAxisControls","handleXAxisChange","selectedXAxis","LegacySelect","placeholder","intl","formatMessage","selectedMetricKeys","handleMetricsSelectChange","mode","axisSelector","Option","handleYAxisLogScaleChange","onClick","handleDownloadCsv","defaultProps","label","marginTop","marginBottom","minWidth","maxWidth","justifyContent","MetricsPlotControls","injectIntl","HtmlTableView","Component","LegacyTable","testId","dataSource","columns","scroll","size","pagination","MetricsSummaryTable","runUuids","renderMetricTables","renderRunTable","runUuid","metricKeys","latestMetrics","minMetrics","maxMetrics","dataIndex","sorter","a","b","dataColumns","getRunValuesByMetric","y","runExperimentIds","runDisplayNames","runName","Fragment","getMetricValuesByRun","latestValue","ellipsis","minValue","maxValue","runIdx","runLink","Link","to","Routes","getRunPageRoute","rowData","_ref2","_ref3","latestMetric","getMetric","minMetric","maxMetric","getValue","latestFormatted","formatMetric","minFormatted","maxFormatted","valuesMap","metric","MetricsSummaryTableWithIntl","connect","mapStateToProps","state","ownProps","forEach","runInfo","getRunInfo","experimentId","getLatestMetrics","getMinMetrics","getMaxMetrics","RunLinksPopover","renderContent","runItems","index","runId","color","marginRight","Utils","renderTitle","handleClose","float","marginLeft","componentDidMount","document","addEventListener","handleKeyDown","componentWillUnmount","removeEventListener","visible","x","handleVisibleChange","LegacyPopover","content","placement","onVisibleChange","left","top","position","CHART_TYPE_BAR","MAXIMUM_METRIC_DATA_POINTS","convertMetricsToCsv","metrics","header","history","rows","flatMap","concat","row","join","MetricsPlotPanel","super","_isMounted","displayPopover","intervalId","legendClickTimeout","prevLegendClickTime","inf","lastClickedLegendCurveId","MAX_DOUBLE_CLICK_INTERVAL_MS","SINGLE_CLICK_EVENT_DELAY_MS","onFocus","setState","focused","onBlur","clearEventListeners","window","clearInterval","allRunsCompleted","completedRunUuids","isHangingRunUuid","activeRunUuid","latestMetricsByRunUuid","timestamps","timestamp","latestTimestamp","Date","getTime","getActiveRunUuids","filter","shouldPoll","updateUrlState","updatedState","location","navigate","experimentIds","JSON","parse","qs","search","newState","getUrlState","lineSmoothness","layout","deselectedCurves","lastLinearYAxisRange","getMetricPageRoute","replace","getNumTotalMetrics","metricsWithRunInfoAndHistory","reduce","loadMetricHistory","logErrorAndNotifyUser","Promise","resolve","loading","promises","_ref4","hasOwnProperty","async","_ref5","requestIds","getUUID","push","nextPageToken","getMetricHistoryApi","next_page_token","success","uid","all","then","results","every","_ref6","_ref7","loadRuns","getRunApi","getMetrics","selectedMetricsSet","Set","m","has","isStep","sort","compareByStepAndTimestamp","compareByTimestamp","newLayout","newAxisType","yaxis","range","autorange","exponentformat","oldYRange","log","pow","e","axisType","target","xaxis","handleLayoutChange","newXRange0","newXRange1","newYRange0","newYRange1","xAxisAutorange","yAxisAutorange","yAxisShowSpikes","xAxisShowSpikes","restFields","mergedLayout","newXAxis","showspikes","newYAxis","csv","blob","Blob","saveAs","handleLegendClick","_ref8","curveNumber","data","currentTime","now","handleLegendDoubleClick","curveKey","getCurveKey","setTimeout","existingDeselectedCurves","delete","add","Array","from","_ref9","clearTimeout","newDeselectedCurves","elem","curvePair","existingMetricKeys","newMetricKeys","k","prevState","historyRequestIds","handleKeyDownOnPopover","_ref10","popoverVisible","updatePopover","popoverX","popoverY","points","event","clientX","clientY","samePointClicked","point","fullData","marker","popoverRunItems","hasMultipleExperiments","setInterval","activeRunUuids","getMetricPlotStateFromUrl","predictChartType","isComparing","params","runs","getAxisType","plotDataElem","metricName","containsInfinities","RequestStateWrapper","shouldOptimisticallyRender","Spinner","visibility","MetricsPlotView","xAxis","extraLayout","onLayoutChange","onLegendClick","onLegendDoubleClick","mapDispatchToProps","withRouterNext","status","metricsByRunUuid","entities","runDisplayName","getRunDisplayName","metricsHistory","entry","normalizeMetricsHistoryEntry","some","_ref11","isNaN","isFinite","EMA","mArray","smoothingWeight","v","smoothness","smoothedArray","biasedElement","i","debiasedElement","DISK_ICON","path","transform","_annotationData","_classPrivateFieldLooseKey","MetricsPlotViewImpl","regenerateInfinityAnnotations","_extraLayout$yaxis","isYAxisLog","annotationData","generateInfinityAnnotations","xValues","getXValuesForLineChart","yValues","Number","isLogScale","stringFormatter","_classPrivateFieldLooseBase","defineProperty","writable","getPlotPropsForLineChart","deselectedCurvesSet","shapes","annotations","historyValues","isSingleHistory","getLineLegend","NaN","toFixed","opacity","hovertemplate","getPlotPropsForBarChart","historyByMetricKey","arrayOfHistorySortedByMetricKey","sortedMetricKeys","truncateString","barmode","xAxisType","minTimestamp","formatTimestamp","componentDidUpdate","plotProps","useResizeHandler","onRelayout","config","displaylogo","scrollZoom","modeBarButtonsToRemove","modeBarButtonsToAdd","click","legend","NotFoundPage"],"sourceRoot":""}